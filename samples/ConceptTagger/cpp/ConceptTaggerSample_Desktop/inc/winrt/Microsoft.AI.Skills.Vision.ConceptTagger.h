// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.190111.3

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.190111.3"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Microsoft.AI.Skills.SkillInterface.2.h"
#include "winrt/impl/Windows.Media.2.h"
#include "winrt/impl/Microsoft.AI.Skills.Vision.ConceptTagger.2.h"

namespace winrt::impl {

template <typename D> hstring consume_Microsoft_AI_Skills_Vision_ConceptTagger_IConceptTagScore<D>::Name() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::Vision::ConceptTagger::IConceptTagScore)->get_Name(put_abi(value)));
    return value;
}

template <typename D> float consume_Microsoft_AI_Skills_Vision_ConceptTagger_IConceptTagScore<D>::Score() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::Vision::ConceptTagger::IConceptTagScore)->get_Score(&value));
    return value;
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_AI_Skills_Vision_ConceptTagger_IConceptTaggerBinding<D>::SetInputImageAsync(Windows::Media::VideoFrame const& videoFrame) const
{
    Windows::Foundation::IAsyncAction operation{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::Vision::ConceptTagger::IConceptTaggerBinding)->SetInputImageAsync(get_abi(videoFrame), put_abi(operation)));
    return operation;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::Vision::ConceptTagger::ConceptTagScore> consume_Microsoft_AI_Skills_Vision_ConceptTagger_IConceptTaggerBinding<D>::GetTopXTagsAboveThreshold(int32_t desiredTopCount, float threshold) const
{
    Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::Vision::ConceptTagger::ConceptTagScore> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::AI::Skills::Vision::ConceptTagger::IConceptTaggerBinding)->GetTopXTagsAboveThreshold(desiredTopCount, threshold, put_abi(result)));
    return result;
}

template <typename D>
struct produce<D, Microsoft::AI::Skills::Vision::ConceptTagger::IConceptTagScore> : produce_base<D, Microsoft::AI::Skills::Vision::ConceptTagger::IConceptTagScore>
{
    int32_t WINRT_CALL get_Name(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Name, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Score(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Score, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Score());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::AI::Skills::Vision::ConceptTagger::IConceptTaggerBinding> : produce_base<D, Microsoft::AI::Skills::Vision::ConceptTagger::IConceptTaggerBinding>
{
    int32_t WINRT_CALL SetInputImageAsync(void* videoFrame, void** operation) noexcept final
    {
        try
        {
            *operation = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetInputImageAsync, WINRT_WRAP(Windows::Foundation::IAsyncAction), Windows::Media::VideoFrame const);
            *operation = detach_from<Windows::Foundation::IAsyncAction>(this->shim().SetInputImageAsync(*reinterpret_cast<Windows::Media::VideoFrame const*>(&videoFrame)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetTopXTagsAboveThreshold(int32_t desiredTopCount, float threshold, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetTopXTagsAboveThreshold, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::Vision::ConceptTagger::ConceptTagScore>), int32_t, float);
            *result = detach_from<Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::Vision::ConceptTagger::ConceptTagScore>>(this->shim().GetTopXTagsAboveThreshold(desiredTopCount, threshold));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::Microsoft::AI::Skills::Vision::ConceptTagger {

inline ConceptTaggerDescriptor::ConceptTaggerDescriptor() :
    ConceptTaggerDescriptor(impl::call_factory<ConceptTaggerDescriptor>([](auto&& f) { return f.template ActivateInstance<ConceptTaggerDescriptor>(); }))
{}

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::Microsoft::AI::Skills::Vision::ConceptTagger::IConceptTagScore> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::Vision::ConceptTagger::IConceptTagScore> {};
template<> struct hash<winrt::Microsoft::AI::Skills::Vision::ConceptTagger::IConceptTaggerBinding> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::Vision::ConceptTagger::IConceptTaggerBinding> {};
template<> struct hash<winrt::Microsoft::AI::Skills::Vision::ConceptTagger::ConceptTagScore> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::Vision::ConceptTagger::ConceptTagScore> {};
template<> struct hash<winrt::Microsoft::AI::Skills::Vision::ConceptTagger::ConceptTaggerBinding> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::Vision::ConceptTagger::ConceptTaggerBinding> {};
template<> struct hash<winrt::Microsoft::AI::Skills::Vision::ConceptTagger::ConceptTaggerDescriptor> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::Vision::ConceptTagger::ConceptTaggerDescriptor> {};
template<> struct hash<winrt::Microsoft::AI::Skills::Vision::ConceptTagger::ConceptTaggerSkill> : winrt::impl::hash_base<winrt::Microsoft::AI::Skills::Vision::ConceptTagger::ConceptTaggerSkill> {};

}
