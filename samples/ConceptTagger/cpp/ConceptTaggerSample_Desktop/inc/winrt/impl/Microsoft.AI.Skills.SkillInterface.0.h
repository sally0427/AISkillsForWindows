// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.190111.3

#pragma once

WINRT_EXPORT namespace winrt::Windows::AI::MachineLearning {

struct LearningModelDevice;

}

WINRT_EXPORT namespace winrt::Windows::ApplicationModel {

struct PackageVersion;

}

WINRT_EXPORT namespace winrt::Windows::Graphics::DirectX::Direct3D11 {

struct IDirect3DDevice;

}

WINRT_EXPORT namespace winrt::Windows::Graphics::Imaging {

enum class BitmapAlphaMode;
enum class BitmapPixelFormat;

}

WINRT_EXPORT namespace winrt::Windows::Media {

struct VideoFrame;

}

WINRT_EXPORT namespace winrt::Microsoft::AI::Skills::SkillInterface {

enum class D3DFeatureLevelKind : int32_t
{
    D3D_FEATURE_LEVEL_1_0_CORE = 4096,
    D3D_FEATURE_LEVEL_9_1 = 37120,
    D3D_FEATURE_LEVEL_9_2 = 37376,
    D3D_FEATURE_LEVEL_9_3 = 37632,
    D3D_FEATURE_LEVEL_10_0 = 40960,
    D3D_FEATURE_LEVEL_10_1 = 41216,
    D3D_FEATURE_LEVEL_11_0 = 45056,
    D3D_FEATURE_LEVEL_11_1 = 45312,
    D3D_FEATURE_LEVEL_12_0 = 49152,
    D3D_FEATURE_LEVEL_12_1 = 49408,
};

enum class ImageInterpolationKind : int32_t
{
    Bilinear = 0,
    Bicubic = 1,
    HighQuality = 2,
};

enum class ImageStretchKind : int32_t
{
    None = 0,
    Fill = 1,
    Uniform = 2,
    UniformToFill = 3,
};

enum class SIMDInstructionSetKind : int32_t
{
    NEON = 0,
    MMX = 1,
    SSE1 = 2,
    SSE2 = 3,
    SSE3 = 4,
    SSSE3 = 5,
    SSE4_1 = 6,
    SSE4_2 = 7,
    SSE4_a = 8,
    FMA3 = 9,
    FMA4 = 10,
    XOP = 11,
    F16C = 12,
    AES = 13,
    SHA = 14,
    ADX = 15,
    ABM = 16,
    BMI1 = 17,
    BMI2 = 18,
    AVX = 19,
    AVX2 = 20,
    AVX512_F = 21,
    AVX512_CD = 22,
    AVX512_PF = 23,
    AVX512_ER = 24,
    AVX512_VL = 25,
    AVX512_BW = 26,
    AVX512_DQ = 27,
    AVX512_IFMA = 28,
    AVX512_VBMI = 29,
};

enum class SkillElementKind : int32_t
{
    Undefined = 0,
    Float = 1,
    Int32 = 2,
    String = 3,
    Boolean = 4,
    Int16 = 5,
    Int64 = 6,
    UInt8 = 7,
    UInt16 = 8,
    UInt32 = 9,
    UInt64 = 10,
    Float16 = 11,
    Double = 12,
};

enum class SkillExecutionDeviceKind : int32_t
{
    Undefined = 0,
    Cpu = 1,
    Gpu = 2,
    Vpu = 3,
    Fpga = 4,
    Cloud = 5,
    Tpu = 6,
    Npu = 7,
    Dsp = 8,
    Gna = 9,
};

enum class SkillFeatureKind : int32_t
{
    Undefined = 0,
    Tensor = 1,
    Map = 2,
    Image = 3,
};

struct ID3D12CommandQueueWrapper;
struct ISkill;
struct ISkillBinding;
struct ISkillDescriptor;
struct ISkillExecutionDevice;
struct ISkillExecutionDeviceCPU;
struct ISkillExecutionDeviceDX;
struct ISkillExecutionDeviceDXCore;
struct ISkillExecutionDeviceDXHelper;
struct ISkillExecutionDeviceDXHelperStatics;
struct ISkillExecutionDeviceDirectX;
struct ISkillFeature;
struct ISkillFeatureDescriptor;
struct ISkillFeatureImageDescriptor;
struct ISkillFeatureImageDescriptor2;
struct ISkillFeatureImageDescriptorFactory;
struct ISkillFeatureImageDescriptorStatics;
struct ISkillFeatureImageValue;
struct ISkillFeatureMapDescriptor;
struct ISkillFeatureMapDescriptorFactory;
struct ISkillFeatureMapDescriptorStatics;
struct ISkillFeatureMapValue;
struct ISkillFeatureStatics;
struct ISkillFeatureTensorBooleanValue;
struct ISkillFeatureTensorCustomValue;
struct ISkillFeatureTensorDescriptor;
struct ISkillFeatureTensorDescriptorFactory;
struct ISkillFeatureTensorDescriptorStatics;
struct ISkillFeatureTensorDoubleValue;
struct ISkillFeatureTensorFloat16Value;
struct ISkillFeatureTensorFloatValue;
struct ISkillFeatureTensorInt16Value;
struct ISkillFeatureTensorInt64Value;
struct ISkillFeatureTensorIntValue;
struct ISkillFeatureTensorStringValue;
struct ISkillFeatureTensorUInt16Value;
struct ISkillFeatureTensorUInt32Value;
struct ISkillFeatureTensorUInt64Value;
struct ISkillFeatureTensorUInt8Value;
struct ISkillFeatureTensorValue;
struct ISkillFeatureValue;
struct ISkillInformation;
struct ISkillInformationStatics;
struct IVisionSkillBindingHelper;
struct IVisionSkillBindingHelperFactory;
struct IVisionSkillBindingHelperOverrides;
struct SkillExecutionDeviceCPUStatics;
struct SkillExecutionDeviceDXCoreStatics;
struct SkillExecutionDeviceDirectXStatics;
struct D3D12CommandQueueWrapper;
struct SkillExecutionDeviceCPU;
struct SkillExecutionDeviceDXCore;
struct SkillExecutionDeviceDXHelper;
struct SkillExecutionDeviceDirectX;
struct SkillFeature;
struct SkillFeatureImageDescriptor;
struct SkillFeatureImageValue;
struct SkillFeatureMapDescriptor;
struct SkillFeatureMapValue;
struct SkillFeatureTensorBooleanValue;
struct SkillFeatureTensorCustomValue;
struct SkillFeatureTensorDescriptor;
struct SkillFeatureTensorDoubleValue;
struct SkillFeatureTensorFloat16Value;
struct SkillFeatureTensorFloatValue;
struct SkillFeatureTensorInt16Value;
struct SkillFeatureTensorInt64Value;
struct SkillFeatureTensorIntValue;
struct SkillFeatureTensorStringValue;
struct SkillFeatureTensorUInt16Value;
struct SkillFeatureTensorUInt32Value;
struct SkillFeatureTensorUInt64Value;
struct SkillFeatureTensorUInt8Value;
struct SkillInformation;
struct VisionSkillBindingHelper;

}

namespace winrt::impl {

template <> struct category<Microsoft::AI::Skills::SkillInterface::ID3D12CommandQueueWrapper>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkill>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillBinding>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillDescriptor>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDevice>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceCPU>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDX>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXCore>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXHelper>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXHelperStatics>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDirectX>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeature>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureDescriptor>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptor>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptor2>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptorFactory>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptorStatics>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapDescriptor>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapDescriptorFactory>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapDescriptorStatics>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureStatics>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorBooleanValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorCustomValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDescriptor>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDescriptorFactory>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDescriptorStatics>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDoubleValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorFloat16Value>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorFloatValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorInt16Value>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorInt64Value>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorIntValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorStringValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt16Value>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt32Value>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt64Value>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt8Value>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillFeatureValue>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillInformation>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ISkillInformationStatics>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::IVisionSkillBindingHelper>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::IVisionSkillBindingHelperFactory>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::IVisionSkillBindingHelperOverrides>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceCPUStatics>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDXCoreStatics>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDirectXStatics>{ using type = interface_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::D3D12CommandQueueWrapper>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceCPU>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDXCore>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDXHelper>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDirectX>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeature>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureImageDescriptor>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureImageValue>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureMapDescriptor>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureMapValue>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorBooleanValue>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorCustomValue>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorDescriptor>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorDoubleValue>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorFloat16Value>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorFloatValue>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorInt16Value>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorInt64Value>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorIntValue>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorStringValue>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorUInt16Value>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorUInt32Value>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorUInt64Value>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorUInt8Value>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillInformation>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::VisionSkillBindingHelper>{ using type = class_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::D3DFeatureLevelKind>{ using type = enum_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ImageInterpolationKind>{ using type = enum_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::ImageStretchKind>{ using type = enum_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SIMDInstructionSetKind>{ using type = enum_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillElementKind>{ using type = enum_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceKind>{ using type = enum_category; };
template <> struct category<Microsoft::AI::Skills::SkillInterface::SkillFeatureKind>{ using type = enum_category; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ID3D12CommandQueueWrapper>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ID3D12CommandQueueWrapper" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkill>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkill" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillBinding>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillBinding" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillDescriptor>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillDescriptor" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDevice>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillExecutionDevice" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceCPU>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillExecutionDeviceCPU" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDX>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillExecutionDeviceDX" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXCore>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillExecutionDeviceDXCore" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXHelper>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillExecutionDeviceDXHelper" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXHelperStatics>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillExecutionDeviceDXHelperStatics" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDirectX>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillExecutionDeviceDirectX" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeature>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeature" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureDescriptor>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureDescriptor" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptor>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureImageDescriptor" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptor2>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureImageDescriptor2" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptorFactory>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureImageDescriptorFactory" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptorStatics>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureImageDescriptorStatics" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureImageValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapDescriptor>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureMapDescriptor" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapDescriptorFactory>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureMapDescriptorFactory" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapDescriptorStatics>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureMapDescriptorStatics" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureMapValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureStatics>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureStatics" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorBooleanValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorBooleanValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorCustomValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorCustomValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDescriptor>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorDescriptor" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDescriptorFactory>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorDescriptorFactory" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDescriptorStatics>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorDescriptorStatics" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDoubleValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorDoubleValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorFloat16Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorFloat16Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorFloatValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorFloatValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorInt16Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorInt16Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorInt64Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorInt64Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorIntValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorIntValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorStringValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorStringValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt16Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorUInt16Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt32Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorUInt32Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt64Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorUInt64Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt8Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorUInt8Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureTensorValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillFeatureValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillFeatureValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillInformation>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillInformation" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ISkillInformationStatics>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ISkillInformationStatics" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::IVisionSkillBindingHelper>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.IVisionSkillBindingHelper" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::IVisionSkillBindingHelperFactory>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.IVisionSkillBindingHelperFactory" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::IVisionSkillBindingHelperOverrides>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.IVisionSkillBindingHelperOverrides" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceCPUStatics>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillExecutionDeviceCPUStatics" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDXCoreStatics>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillExecutionDeviceDXCoreStatics" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDirectXStatics>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillExecutionDeviceDirectXStatics" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::D3D12CommandQueueWrapper>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.D3D12CommandQueueWrapper" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceCPU>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillExecutionDeviceCPU" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDXCore>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillExecutionDeviceDXCore" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDXHelper>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillExecutionDeviceDXHelper" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDirectX>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillExecutionDeviceDirectX" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeature>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeature" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureImageDescriptor>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureImageDescriptor" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureImageValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureImageValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureMapDescriptor>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureMapDescriptor" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureMapValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureMapValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorBooleanValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureTensorBooleanValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorCustomValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureTensorCustomValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorDescriptor>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureTensorDescriptor" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorDoubleValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureTensorDoubleValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorFloat16Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureTensorFloat16Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorFloatValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureTensorFloatValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorInt16Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureTensorInt16Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorInt64Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureTensorInt64Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorIntValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureTensorIntValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorStringValue>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureTensorStringValue" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorUInt16Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureTensorUInt16Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorUInt32Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureTensorUInt32Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorUInt64Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureTensorUInt64Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorUInt8Value>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureTensorUInt8Value" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillInformation>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillInformation" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::VisionSkillBindingHelper>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.VisionSkillBindingHelper" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::D3DFeatureLevelKind>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.D3DFeatureLevelKind" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ImageInterpolationKind>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ImageInterpolationKind" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::ImageStretchKind>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.ImageStretchKind" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SIMDInstructionSetKind>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SIMDInstructionSetKind" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillElementKind>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillElementKind" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceKind>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillExecutionDeviceKind" }; };
template <> struct name<Microsoft::AI::Skills::SkillInterface::SkillFeatureKind>{ static constexpr auto & value{ L"Microsoft.AI.Skills.SkillInterface.SkillFeatureKind" }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ID3D12CommandQueueWrapper>{ static constexpr guid value{ 0x9D765C5C,0x38F4,0x472C,{ 0x9D,0xFE,0x23,0x3F,0x39,0x7B,0xB7,0xDB } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkill>{ static constexpr guid value{ 0x4135999C,0xEAB4,0x411D,{ 0xBB,0x13,0x62,0x3F,0x27,0xE3,0xD0,0x34 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillBinding>{ static constexpr guid value{ 0xC7C8CC6D,0xF9E2,0x4137,{ 0xA9,0x4C,0x56,0x80,0x67,0xAA,0xF7,0x13 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillDescriptor>{ static constexpr guid value{ 0xBA8762E6,0x4B97,0x49CF,{ 0x84,0x65,0x6A,0x81,0x17,0xA2,0xA2,0xF2 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDevice>{ static constexpr guid value{ 0x9A6F2FBF,0x11A5,0x4AA1,{ 0x9E,0x2D,0x1C,0x37,0x83,0xA6,0x59,0x56 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceCPU>{ static constexpr guid value{ 0xB5589A79,0x653A,0x4BC7,{ 0xA5,0xF5,0x8E,0x68,0xBA,0x1B,0x2D,0x4B } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDX>{ static constexpr guid value{ 0x051C0CF1,0xF5C2,0x42F9,{ 0xBB,0x4F,0xD7,0xFD,0xA6,0x88,0x3B,0xA3 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXCore>{ static constexpr guid value{ 0x9C5BB3B3,0x1860,0x441F,{ 0x9F,0xC4,0x6A,0x17,0x50,0x47,0x2F,0xA2 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXHelper>{ static constexpr guid value{ 0x833DE02B,0x1089,0x5959,{ 0x91,0x33,0xA1,0xD0,0x53,0x9B,0x9F,0x1C } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXHelperStatics>{ static constexpr guid value{ 0x8F8BD075,0xB9CD,0x5E5E,{ 0x99,0xBF,0x2A,0x92,0x23,0x1E,0x7A,0x9E } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDirectX>{ static constexpr guid value{ 0x56C00BCF,0x0668,0x4448,{ 0x93,0xE0,0x57,0x1D,0xDE,0x34,0x61,0x56 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeature>{ static constexpr guid value{ 0x681599FB,0xD5EE,0x462C,{ 0x8D,0x49,0x36,0x06,0xE4,0xF2,0x00,0x2B } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureDescriptor>{ static constexpr guid value{ 0xC8D5FE95,0x0144,0x4303,{ 0x9C,0xE0,0x67,0x8D,0xBC,0xC3,0x8F,0xB9 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptor>{ static constexpr guid value{ 0x61612C40,0x9029,0x4026,{ 0xB2,0xCD,0xE9,0x23,0xA5,0xED,0x0E,0xC3 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptor2>{ static constexpr guid value{ 0x2163CC75,0x0904,0x5552,{ 0xA4,0x5E,0xE7,0xDE,0x37,0x23,0xD6,0xAD } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptorFactory>{ static constexpr guid value{ 0xD76BD13A,0x41FD,0x5BDC,{ 0x83,0x9D,0xFE,0xD9,0x6C,0x37,0x0C,0x04 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptorStatics>{ static constexpr guid value{ 0x86B5B4E6,0x55D8,0x4280,{ 0xA8,0x95,0x22,0x6A,0xCE,0x36,0x9E,0x76 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageValue>{ static constexpr guid value{ 0x62090236,0x5624,0x4EF4,{ 0x84,0xEC,0x75,0x42,0xAC,0xFD,0x0C,0x9A } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapDescriptor>{ static constexpr guid value{ 0xD78B6380,0x2745,0x46D2,{ 0x9A,0x04,0x37,0xEC,0xFD,0xE9,0x54,0x5F } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapDescriptorFactory>{ static constexpr guid value{ 0x3CFE8A13,0xF277,0x543E,{ 0x82,0x5B,0x22,0x5B,0xCD,0xD5,0xA7,0x07 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapDescriptorStatics>{ static constexpr guid value{ 0x89BE4625,0xDA40,0x4C55,{ 0x8F,0x0D,0xFE,0xC2,0xFB,0xE8,0xC5,0x12 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapValue>{ static constexpr guid value{ 0xD72D1CFB,0x0EE5,0x40E6,{ 0xAB,0xBB,0x3B,0xC6,0x5B,0xDC,0xFF,0xD1 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureStatics>{ static constexpr guid value{ 0xF93FAC96,0xAC15,0x4B2B,{ 0xAA,0xC1,0x68,0x24,0x9A,0x67,0xEE,0x13 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorBooleanValue>{ static constexpr guid value{ 0x5DC414E9,0xF535,0x4A12,{ 0xAC,0x11,0x04,0xBB,0xF6,0x7F,0xD2,0xEC } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorCustomValue>{ static constexpr guid value{ 0x274E2BB2,0x96DA,0x4C11,{ 0x84,0x6F,0x44,0xDE,0x16,0x57,0x79,0x5F } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDescriptor>{ static constexpr guid value{ 0x040FC4B2,0x4528,0x4463,{ 0xAE,0x68,0x5E,0x16,0x61,0x49,0xD7,0x6E } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDescriptorFactory>{ static constexpr guid value{ 0x9998F56F,0xCEBE,0x522F,{ 0xB4,0xFA,0xB2,0xF0,0xE1,0xE3,0xDB,0xF4 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDescriptorStatics>{ static constexpr guid value{ 0x88F1DAD4,0x048E,0x4869,{ 0x85,0x55,0x15,0x66,0x8C,0x33,0xD7,0xF6 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDoubleValue>{ static constexpr guid value{ 0xC4657764,0x298B,0x44D9,{ 0xB6,0xB8,0xCD,0xEA,0x62,0x97,0x93,0xC1 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorFloat16Value>{ static constexpr guid value{ 0x15D169A1,0x6B38,0x4220,{ 0x90,0x25,0xC0,0xC6,0x20,0x38,0x16,0x4A } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorFloatValue>{ static constexpr guid value{ 0x0D15AC02,0x8C3A,0x463D,{ 0xBB,0xF7,0xBB,0xDC,0xBC,0x6E,0x0B,0xDE } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorInt16Value>{ static constexpr guid value{ 0x4AF6F069,0x5E86,0x448D,{ 0x82,0xC5,0xE2,0xCC,0x8D,0x7F,0x4E,0xE1 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorInt64Value>{ static constexpr guid value{ 0x80995D0C,0xBE20,0x4CB3,{ 0xA3,0x72,0xCA,0xFE,0x31,0xBB,0xEE,0xC6 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorIntValue>{ static constexpr guid value{ 0x7FF4E0CA,0x58C6,0x4714,{ 0x8C,0x35,0xC5,0xC5,0x1A,0x42,0xBF,0x40 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorStringValue>{ static constexpr guid value{ 0x7C244471,0xC624,0x474C,{ 0x8F,0x82,0xE8,0xE7,0xA1,0xEC,0x19,0x29 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt16Value>{ static constexpr guid value{ 0xF18A299D,0xBA61,0x4E7E,{ 0xAB,0x1E,0x8A,0xFE,0x8E,0xAE,0x7A,0x7B } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt32Value>{ static constexpr guid value{ 0x5BDB4867,0xB32D,0x4718,{ 0x86,0x92,0x9A,0x05,0x4A,0x94,0xCD,0xF4 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt64Value>{ static constexpr guid value{ 0x48D61C28,0x1B90,0x4363,{ 0x8A,0x64,0x0D,0x53,0xF0,0xFF,0x7B,0x79 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt8Value>{ static constexpr guid value{ 0x43E10B0F,0x69F2,0x4BF5,{ 0x81,0xA4,0x73,0xC6,0x4D,0x67,0x44,0x1A } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorValue>{ static constexpr guid value{ 0x4E2706AF,0x643E,0x4D05,{ 0x9A,0x10,0x4E,0x0F,0x44,0xDD,0x56,0xC5 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillFeatureValue>{ static constexpr guid value{ 0x81B32B08,0x7FFC,0x487F,{ 0x9C,0x8E,0xED,0xCD,0xA5,0xAB,0x9F,0x07 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillInformation>{ static constexpr guid value{ 0x32B66B1D,0x09CD,0x471C,{ 0xBD,0xE7,0x25,0xCA,0x61,0xF1,0x4B,0x00 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::ISkillInformationStatics>{ static constexpr guid value{ 0xE7BEB949,0x0C8C,0x45AC,{ 0xB6,0x0D,0x2D,0xD4,0x9D,0xD1,0x9B,0x7A } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::IVisionSkillBindingHelper>{ static constexpr guid value{ 0xFFC0BE33,0x14CB,0x4F95,{ 0x8F,0x0A,0xC8,0xB6,0x6E,0xC2,0x59,0x72 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::IVisionSkillBindingHelperFactory>{ static constexpr guid value{ 0x31BC0CBB,0xAB33,0x5C77,{ 0xB5,0x81,0x03,0x98,0x3F,0x6F,0xA3,0x29 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::IVisionSkillBindingHelperOverrides>{ static constexpr guid value{ 0x108BD4D9,0x8CBA,0x553D,{ 0xB9,0xE7,0xCF,0x3F,0xCE,0x86,0xF8,0xBA } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceCPUStatics>{ static constexpr guid value{ 0xC2F92D14,0xEDC7,0x4DFA,{ 0x9C,0x01,0x43,0xC8,0x5B,0xDD,0xB4,0x55 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDXCoreStatics>{ static constexpr guid value{ 0x08575E63,0x02E6,0x487C,{ 0xAB,0xE9,0xDA,0x81,0x63,0x0C,0x43,0xA4 } }; };
template <> struct guid_storage<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDirectXStatics>{ static constexpr guid value{ 0x302D442C,0x2DE4,0x4C63,{ 0x9C,0xFD,0xE1,0x59,0xB6,0x91,0xC7,0x4B } }; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::D3D12CommandQueueWrapper>{ using type = Microsoft::AI::Skills::SkillInterface::ID3D12CommandQueueWrapper; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceCPU>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceCPU; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDXCore>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXCore; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDXHelper>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXHelper; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDirectX>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDirectX; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeature>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeature; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureImageDescriptor>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptor; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureImageValue>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageValue; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureMapDescriptor>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapDescriptor; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureMapValue>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapValue; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorBooleanValue>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorBooleanValue; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorCustomValue>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorCustomValue; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorDescriptor>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDescriptor; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorDoubleValue>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDoubleValue; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorFloat16Value>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorFloat16Value; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorFloatValue>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorFloatValue; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorInt16Value>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorInt16Value; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorInt64Value>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorInt64Value; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorIntValue>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorIntValue; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorStringValue>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorStringValue; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorUInt16Value>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt16Value; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorUInt32Value>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt32Value; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorUInt64Value>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt64Value; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorUInt8Value>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt8Value; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::SkillInformation>{ using type = Microsoft::AI::Skills::SkillInterface::ISkillInformation; };
template <> struct default_interface<Microsoft::AI::Skills::SkillInterface::VisionSkillBindingHelper>{ using type = Microsoft::AI::Skills::SkillInterface::IVisionSkillBindingHelper; };

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ID3D12CommandQueueWrapper>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateLearningModelDevice(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkill>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_SkillDescriptor(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Device(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL CreateSkillBindingAsync(void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL EvaluateAsync(void* binding, void** operation) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillBinding>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Device(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillDescriptor>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Information(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_InputFeatureDescriptors(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_OutputFeatureDescriptors(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL GetSupportedExecutionDevicesAsync(void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL get_Metadata(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL CreateSkillAsync(void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL CreateSkillAsync2(void* executionDevice, void** operation) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDevice>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Name(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ExecutionDeviceKind(Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceKind* value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceCPU>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_CoreCount(uint16_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL IsSIMDInstructionSetKindSupported(Microsoft::AI::Skills::SkillInterface::SIMDInstructionSetKind instructionSetKind, bool* result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDX>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_MaxSupportedFeatureLevel(Microsoft::AI::Skills::SkillInterface::D3DFeatureLevelKind* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_AdapterId(uint64_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_DedicatedVideoMemory(uint64_t* value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXCore>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_D3D12CommandQueue(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXHelper>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXHelperStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAvailableDXExecutionDevices(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDirectX>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Direct3D11Device(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsDefault(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_HighPerformanceIndex(uint16_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_PowerSavingIndex(uint16_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsD3D12Supported(bool* value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeature>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Descriptor(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Device(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL SetFeatureValueAsync(void* value, void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL SetFeatureValueAsync2(void* value, void* descriptor, void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL get_FeatureValue(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL SourceFromOtherFeature(void* sourceFeature) noexcept = 0;
    virtual int32_t WINRT_CALL get_CustomFeatureId(winrt::guid* value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureDescriptor>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Name(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Description(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_IsRequired(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_FeatureKind(Microsoft::AI::Skills::SkillInterface::SkillFeatureKind* value) noexcept = 0;
    virtual int32_t WINRT_CALL CreateValueAsync(void* value, void* device, void** operation) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptor>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Height(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Width(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SupportedBitmapPixelFormat(Windows::Graphics::Imaging::BitmapPixelFormat* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SupportedBitmapAlphaMode(Windows::Graphics::Imaging::BitmapAlphaMode* value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptor2>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ImageStretchKindApplied(Microsoft::AI::Skills::SkillInterface::ImageStretchKind* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ImageInterpolationKindApplied(Microsoft::AI::Skills::SkillInterface::ImageInterpolationKind* value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptorFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* name, void* description, bool isRequired, int32_t width, int32_t height, Windows::Graphics::Imaging::BitmapPixelFormat supportedBitmapPixelFormat, Windows::Graphics::Imaging::BitmapAlphaMode supportedBitmapAlphaMode, void** value) noexcept = 0;
    virtual int32_t WINRT_CALL CreateInstance2(void* name, void* description, bool isRequired, int32_t width, int32_t height, Windows::Graphics::Imaging::BitmapPixelFormat supportedBitmapPixelFormat, Windows::Graphics::Imaging::BitmapAlphaMode supportedBitmapAlphaMode, Microsoft::AI::Skills::SkillInterface::ImageStretchKind imageStretchKindApplied, Microsoft::AI::Skills::SkillInterface::ImageInterpolationKind imageInterpolationKindApplied, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptorStatics>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_VideoFrame(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapDescriptor>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ValueElementKind(Microsoft::AI::Skills::SkillInterface::SkillElementKind* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_KeyElementKind(Microsoft::AI::Skills::SkillInterface::SkillElementKind* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ValidKeys(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapDescriptorFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* name, void* description, bool isRequired, Microsoft::AI::Skills::SkillInterface::SkillElementKind valueElementKind, Microsoft::AI::Skills::SkillInterface::SkillElementKind keyElementKind, void* validKeys, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapDescriptorStatics>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_MapView(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL Create(void* descriptor, void* device, void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorBooleanValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorCustomValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDescriptor>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ElementKind(Microsoft::AI::Skills::SkillInterface::SkillElementKind* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Shape(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDescriptorFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* name, void* description, bool isRequired, void* shape, Microsoft::AI::Skills::SkillInterface::SkillElementKind elementKind, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDescriptorStatics>{ struct type : IInspectable
{
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDoubleValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorFloat16Value>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorFloatValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorInt16Value>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorInt64Value>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorIntValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorStringValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt16Value>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt32Value>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt64Value>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt8Value>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAsVectorView(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Shape(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillFeatureValue>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Descriptor(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillInformation>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Name(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Description(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Id(winrt::guid* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Version(struct struct_Windows_ApplicationModel_PackageVersion* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Author(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Publisher(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::ISkillInformationStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL Create(void* name, void* description, winrt::guid id, struct struct_Windows_ApplicationModel_PackageVersion version, void* author, void* publisher, void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::IVisionSkillBindingHelper>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Device(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL SetInputImageAsync(void* videoFrame, void** operation) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::IVisionSkillBindingHelperFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateInstance(void* descriptor, void* device, void* baseInterface, void** innerInterface, void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::IVisionSkillBindingHelperOverrides>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL SetInputImageInternalAsync(void* videoFrame, void** operation) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceCPUStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL Create(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDXCoreStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAvailableDXCoreExecutionDevices(void** result) noexcept = 0;
    virtual int32_t WINRT_CALL Create(void* direct3D12CommandQueueWrapper, void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDirectXStatics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL GetAvailableDirectXExecutionDevices(void** result) noexcept = 0;
    virtual int32_t WINRT_CALL Create(void* direct3D11Device, void** result) noexcept = 0;
};};

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ID3D12CommandQueueWrapper
{
    Windows::AI::MachineLearning::LearningModelDevice CreateLearningModelDevice() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ID3D12CommandQueueWrapper> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ID3D12CommandQueueWrapper<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkill
{
    Microsoft::AI::Skills::SkillInterface::ISkillDescriptor SkillDescriptor() const;
    Microsoft::AI::Skills::SkillInterface::ISkillExecutionDevice Device() const;
    Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterface::ISkillBinding> CreateSkillBindingAsync() const;
    Windows::Foundation::IAsyncAction EvaluateAsync(Microsoft::AI::Skills::SkillInterface::ISkillBinding const& binding) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkill> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkill<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillBinding
{
    Microsoft::AI::Skills::SkillInterface::ISkillExecutionDevice Device() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillBinding> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillBinding<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillDescriptor
{
    Microsoft::AI::Skills::SkillInterface::SkillInformation Information() const;
    Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterface::ISkillFeatureDescriptor> InputFeatureDescriptors() const;
    Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterface::ISkillFeatureDescriptor> OutputFeatureDescriptors() const;
    Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDevice>> GetSupportedExecutionDevicesAsync() const;
    Windows::Foundation::Collections::IMapView<hstring, hstring> Metadata() const;
    Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterface::ISkill> CreateSkillAsync() const;
    Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterface::ISkill> CreateSkillAsync(Microsoft::AI::Skills::SkillInterface::ISkillExecutionDevice const& executionDevice) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillDescriptor> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillDescriptor<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillExecutionDevice
{
    hstring Name() const;
    Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceKind ExecutionDeviceKind() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDevice> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillExecutionDevice<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillExecutionDeviceCPU
{
    uint16_t CoreCount() const;
    bool IsSIMDInstructionSetKindSupported(Microsoft::AI::Skills::SkillInterface::SIMDInstructionSetKind const& instructionSetKind) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceCPU> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillExecutionDeviceCPU<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillExecutionDeviceDX
{
    Microsoft::AI::Skills::SkillInterface::D3DFeatureLevelKind MaxSupportedFeatureLevel() const;
    uint64_t AdapterId() const;
    uint64_t DedicatedVideoMemory() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDX> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillExecutionDeviceDX<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillExecutionDeviceDXCore
{
    Microsoft::AI::Skills::SkillInterface::D3D12CommandQueueWrapper D3D12CommandQueue() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXCore> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillExecutionDeviceDXCore<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillExecutionDeviceDXHelper
{
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXHelper> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillExecutionDeviceDXHelper<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillExecutionDeviceDXHelperStatics
{
    Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDX> GetAvailableDXExecutionDevices() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDXHelperStatics> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillExecutionDeviceDXHelperStatics<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillExecutionDeviceDirectX
{
    Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice Direct3D11Device() const;
    bool IsDefault() const;
    uint16_t HighPerformanceIndex() const;
    uint16_t PowerSavingIndex() const;
    bool IsD3D12Supported() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillExecutionDeviceDirectX> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillExecutionDeviceDirectX<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeature
{
    Microsoft::AI::Skills::SkillInterface::ISkillFeatureDescriptor Descriptor() const;
    Microsoft::AI::Skills::SkillInterface::ISkillExecutionDevice Device() const;
    Windows::Foundation::IAsyncAction SetFeatureValueAsync(Windows::Foundation::IInspectable const& value) const;
    Windows::Foundation::IAsyncAction SetFeatureValueAsync(Windows::Foundation::IInspectable const& value, Microsoft::AI::Skills::SkillInterface::ISkillFeatureDescriptor const& descriptor) const;
    Microsoft::AI::Skills::SkillInterface::ISkillFeatureValue FeatureValue() const;
    void SourceFromOtherFeature(Microsoft::AI::Skills::SkillInterface::ISkillFeature const& sourceFeature) const;
    winrt::guid CustomFeatureId() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeature> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeature<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureDescriptor
{
    hstring Name() const;
    hstring Description() const;
    bool IsRequired() const;
    Microsoft::AI::Skills::SkillInterface::SkillFeatureKind FeatureKind() const;
    Windows::Foundation::IAsyncOperation<Microsoft::AI::Skills::SkillInterface::ISkillFeatureValue> CreateValueAsync(Windows::Foundation::IInspectable const& value, Microsoft::AI::Skills::SkillInterface::ISkillExecutionDevice const& device) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureDescriptor> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureDescriptor<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureImageDescriptor
{
    int32_t Height() const;
    int32_t Width() const;
    Windows::Graphics::Imaging::BitmapPixelFormat SupportedBitmapPixelFormat() const;
    Windows::Graphics::Imaging::BitmapAlphaMode SupportedBitmapAlphaMode() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptor> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureImageDescriptor<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureImageDescriptor2
{
    Microsoft::AI::Skills::SkillInterface::ImageStretchKind ImageStretchKindApplied() const;
    Microsoft::AI::Skills::SkillInterface::ImageInterpolationKind ImageInterpolationKindApplied() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptor2> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureImageDescriptor2<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureImageDescriptorFactory
{
    Microsoft::AI::Skills::SkillInterface::SkillFeatureImageDescriptor CreateInstance(param::hstring const& name, param::hstring const& description, bool isRequired, int32_t width, int32_t height, Windows::Graphics::Imaging::BitmapPixelFormat const& supportedBitmapPixelFormat, Windows::Graphics::Imaging::BitmapAlphaMode const& supportedBitmapAlphaMode) const;
    Microsoft::AI::Skills::SkillInterface::SkillFeatureImageDescriptor CreateInstance2(param::hstring const& name, param::hstring const& description, bool isRequired, int32_t width, int32_t height, Windows::Graphics::Imaging::BitmapPixelFormat const& supportedBitmapPixelFormat, Windows::Graphics::Imaging::BitmapAlphaMode const& supportedBitmapAlphaMode, Microsoft::AI::Skills::SkillInterface::ImageStretchKind const& imageStretchKindApplied, Microsoft::AI::Skills::SkillInterface::ImageInterpolationKind const& imageInterpolationKindApplied) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptorFactory> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureImageDescriptorFactory<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureImageDescriptorStatics
{
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageDescriptorStatics> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureImageDescriptorStatics<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureImageValue
{
    Windows::Media::VideoFrame VideoFrame() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureImageValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureImageValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureMapDescriptor
{
    Microsoft::AI::Skills::SkillInterface::SkillElementKind ValueElementKind() const;
    Microsoft::AI::Skills::SkillInterface::SkillElementKind KeyElementKind() const;
    Windows::Foundation::Collections::IIterable<Windows::Foundation::IInspectable> ValidKeys() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapDescriptor> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureMapDescriptor<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureMapDescriptorFactory
{
    Microsoft::AI::Skills::SkillInterface::SkillFeatureMapDescriptor CreateInstance(param::hstring const& name, param::hstring const& description, bool isRequired, Microsoft::AI::Skills::SkillInterface::SkillElementKind const& valueElementKind, Microsoft::AI::Skills::SkillInterface::SkillElementKind const& keyElementKind, param::iterable<Windows::Foundation::IInspectable> const& validKeys) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapDescriptorFactory> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureMapDescriptorFactory<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureMapDescriptorStatics
{
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapDescriptorStatics> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureMapDescriptorStatics<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureMapValue
{
    Windows::Foundation::IInspectable MapView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureMapValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureMapValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureStatics
{
    Microsoft::AI::Skills::SkillInterface::SkillFeature Create(Microsoft::AI::Skills::SkillInterface::ISkillFeatureDescriptor const& descriptor, Microsoft::AI::Skills::SkillInterface::ISkillExecutionDevice const& device) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureStatics> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureStatics<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorBooleanValue
{
    Windows::Foundation::Collections::IVectorView<bool> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorBooleanValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorBooleanValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorCustomValue
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorCustomValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorCustomValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorDescriptor
{
    Microsoft::AI::Skills::SkillInterface::SkillElementKind ElementKind() const;
    Windows::Foundation::Collections::IVectorView<int32_t> Shape() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDescriptor> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorDescriptor<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorDescriptorFactory
{
    Microsoft::AI::Skills::SkillInterface::SkillFeatureTensorDescriptor CreateInstance(param::hstring const& name, param::hstring const& description, bool isRequired, param::vector_view<int32_t> const& shape, Microsoft::AI::Skills::SkillInterface::SkillElementKind const& elementKind) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDescriptorFactory> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorDescriptorFactory<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorDescriptorStatics
{
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDescriptorStatics> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorDescriptorStatics<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorDoubleValue
{
    Windows::Foundation::Collections::IVectorView<double> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorDoubleValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorDoubleValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorFloat16Value
{
    Windows::Foundation::Collections::IVectorView<float> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorFloat16Value> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorFloat16Value<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorFloatValue
{
    Windows::Foundation::Collections::IVectorView<float> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorFloatValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorFloatValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorInt16Value
{
    Windows::Foundation::Collections::IVectorView<int16_t> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorInt16Value> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorInt16Value<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorInt64Value
{
    Windows::Foundation::Collections::IVectorView<int64_t> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorInt64Value> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorInt64Value<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorIntValue
{
    Windows::Foundation::Collections::IVectorView<int32_t> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorIntValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorIntValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorStringValue
{
    Windows::Foundation::Collections::IVectorView<hstring> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorStringValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorStringValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorUInt16Value
{
    Windows::Foundation::Collections::IVectorView<uint16_t> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt16Value> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorUInt16Value<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorUInt32Value
{
    Windows::Foundation::Collections::IVectorView<uint32_t> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt32Value> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorUInt32Value<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorUInt64Value
{
    Windows::Foundation::Collections::IVectorView<uint64_t> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt64Value> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorUInt64Value<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorUInt8Value
{
    Windows::Foundation::Collections::IVectorView<uint8_t> GetAsVectorView() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorUInt8Value> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorUInt8Value<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorValue
{
    Windows::Foundation::Collections::IVectorView<int32_t> Shape() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureTensorValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureTensorValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureValue
{
    Microsoft::AI::Skills::SkillInterface::ISkillFeatureDescriptor Descriptor() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillFeatureValue> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillFeatureValue<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillInformation
{
    hstring Name() const;
    hstring Description() const;
    winrt::guid Id() const;
    Windows::ApplicationModel::PackageVersion Version() const;
    hstring Author() const;
    hstring Publisher() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillInformation> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillInformation<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_ISkillInformationStatics
{
    Microsoft::AI::Skills::SkillInterface::SkillInformation Create(param::hstring const& name, param::hstring const& description, winrt::guid const& id, Windows::ApplicationModel::PackageVersion const& version, param::hstring const& author, param::hstring const& publisher) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::ISkillInformationStatics> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_ISkillInformationStatics<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_IVisionSkillBindingHelper
{
    Microsoft::AI::Skills::SkillInterface::ISkillExecutionDevice Device() const;
    Windows::Foundation::IAsyncAction SetInputImageAsync(Windows::Media::VideoFrame const& videoFrame) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::IVisionSkillBindingHelper> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_IVisionSkillBindingHelper<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_IVisionSkillBindingHelperFactory
{
    Microsoft::AI::Skills::SkillInterface::VisionSkillBindingHelper CreateInstance(Microsoft::AI::Skills::SkillInterface::ISkillDescriptor const& descriptor, Microsoft::AI::Skills::SkillInterface::ISkillExecutionDevice const& device, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::IVisionSkillBindingHelperFactory> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_IVisionSkillBindingHelperFactory<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_IVisionSkillBindingHelperOverrides
{
    Windows::Foundation::IAsyncAction SetInputImageInternalAsync(Windows::Media::VideoFrame const& videoFrame) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::IVisionSkillBindingHelperOverrides> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_IVisionSkillBindingHelperOverrides<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_SkillExecutionDeviceCPUStatics
{
    Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceCPU Create() const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceCPUStatics> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_SkillExecutionDeviceCPUStatics<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_SkillExecutionDeviceDXCoreStatics
{
    Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDXCore> GetAvailableDXCoreExecutionDevices() const;
    Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDXCore Create(Microsoft::AI::Skills::SkillInterface::D3D12CommandQueueWrapper const& direct3D12CommandQueueWrapper) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDXCoreStatics> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_SkillExecutionDeviceDXCoreStatics<D>; };

template <typename D>
struct consume_Microsoft_AI_Skills_SkillInterface_SkillExecutionDeviceDirectXStatics
{
    Windows::Foundation::Collections::IVectorView<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDirectX> GetAvailableDirectXExecutionDevices() const;
    Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDirectX Create(Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice const& direct3D11Device) const;
};
template <> struct consume<Microsoft::AI::Skills::SkillInterface::SkillExecutionDeviceDirectXStatics> { template <typename D> using type = consume_Microsoft_AI_Skills_SkillInterface_SkillExecutionDeviceDirectXStatics<D>; };

}
